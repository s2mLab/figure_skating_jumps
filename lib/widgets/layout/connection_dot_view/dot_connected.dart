import 'package:figure_skating_jumps/constants/colors.dart';
import 'package:figure_skating_jumps/constants/lang_fr.dart';
import 'package:figure_skating_jumps/services/x_sens/x_sens_dot_bluetooth_discovery_service.dart';
import 'package:figure_skating_jumps/services/x_sens/x_sens_dot_connection_service.dart';
import 'package:flutter/material.dart';


import '../../../enums/x_sens_device_state.dart';
import '../../buttons/x_sens_dot_list_element.dart';
import '../../dialogs/configure_x_sens_dot_dialog.dart';
import '../../icons/x_sens_state_icon.dart';

class DotConnected extends StatefulWidget {
  const DotConnected({Key? key}) : super(key: key);

  @override
  State<DotConnected> createState() => _DotConnectedState();
}

class _DotConnectedState extends State<DotConnected> {
  late XSensStateIcon stateIconConnected;
  late XSensStateIcon stateIconDisconnected;

  @override
  void initState() {
    stateIconConnected =
        const XSensStateIcon(true, XSensDeviceState.connected);
    stateIconDisconnected =
        const XSensStateIcon(true, XSensDeviceState.disconnected);

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 32.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              margin: const EdgeInsets.symmetric(vertical: 8),
              child: const Text(
                connectedDevice,
                style: TextStyle(color: primaryColorLight, fontSize: 20),
              ),
            ),
            Container(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: Container(
                  margin: const EdgeInsets.symmetric(vertical: 8),
                  child: XSensDotListElement(
                      hasLine: true,
                      lineColor: connectedXSensDotButtonIndicator,
                      text: XSensDotConnectionService().currentXSensDevice == null ? "No device" : XSensDotConnectionService().currentXSensDevice!.assignedName,
                      graphic: stateIconConnected,
                      onPressed: () async {
                        final result = await showDialog(
                            context: context,
                            builder: (BuildContext context) {
                              return ConfigureXSensDotDialog(
                                  name: XSensDotBluetoothDiscoveryService()
                                      .getDevices()[0]
                                      .assignedName, close: () { if(mounted) Navigator.of(context).pop(); },);
                            });
                        if (result == null) setState(() {});
                      }),
                )),
            Container(
              margin: const EdgeInsets.symmetric(vertical: 16),
              child: Row(
                children: const [
                  Text(
                    knownDevicesNear,
                    style: TextStyle(color: primaryColorLight, fontSize: 20),
                  ),
                  Padding(
                    padding: EdgeInsets.only(left: 16.0),
                    child: SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(
                        color: discreetText,
                        value: null,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            Container(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: XSensDotListElement(
                  hasLine: true,
                  text: XSensDotBluetoothDiscoveryService()
                      .getDevices()[0]
                      .assignedName, // TODO: Change for autogenerated list when DB available
                  graphic: stateIconDisconnected,
                  onPressed: () => debugPrint("Pressed"),
                )),
            Container(
              margin: const EdgeInsets.symmetric(vertical: 16),
              child: const Text(
                myDevices,
                style: TextStyle(color: primaryColorLight, fontSize: 20),
              ),
            ),
            Container(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: XSensDotListElement(
                  hasLine: true,
                  text: XSensDotBluetoothDiscoveryService()
                      .getDevices()[0]
                      .assignedName, // TODO: Change for autogenerated list when DB available
                  graphic: stateIconDisconnected,
                  onPressed: () => debugPrint("Pressed"),
                )),
            Container(
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: XSensDotListElement(
                  hasLine: true,
                  text: XSensDotBluetoothDiscoveryService()
                      .getDevices()[0]
                      .assignedName, // TODO: Change for autogenerated list when DB available
                  graphic: stateIconDisconnected,
                  onPressed: () => debugPrint("Pressed"),
                )),
          ],
        ),
      ),
    );
  }
}
